// –ü—Ä–∏–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Robokassa
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Express.js –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫

const express = require('express');
const crypto = require('crypto');
const app = express();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Robokassa
const ROBOKASSA_CONFIG = {
  merchantLogin: '–í–ê–®_–õ–û–ì–ò–ù',
  password1: '–í–ê–®_–ü–ê–†–û–õ–¨_1',
  password2: '–í–ê–®_–ü–ê–†–û–õ–¨_2',
  isTest: true
};

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
function generateSignature(orderId, amount, password) {
  const signatureString = `${ROBOKASSA_CONFIG.merchantLogin}:${amount}:${orderId}:${password}`;
  return crypto.createHash('md5').update(signatureString).digest('hex');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
function verifySignature(orderId, amount, signature, password) {
  const expectedSignature = generateSignature(orderId, amount, password);
  return signature.toLowerCase() === expectedSignature.toLowerCase();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Robokassa
app.post('/api/robokassa/notification', (req, res) => {
  const {
    OutSum,           // –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
    InvId,            // –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    SignatureValue,   // –ü–æ–¥–ø–∏—Å—å
    EMail,            // Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Fee,              // –ö–æ–º–∏—Å—Å–∏—è
    OutSumCurrency    // –í–∞–ª—é—Ç–∞
  } = req.body;

  console.log('–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Robokassa:', req.body);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
  const isValidSignature = verifySignature(
    InvId, 
    OutSum, 
    SignatureValue, 
    ROBOKASSA_CONFIG.password2
  );

  if (!isValidSignature) {
    console.error('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    res.status(400).send('WRONG SIGNATURE');
    return;
  }

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    saveOrder({
      orderId: InvId,
      amount: OutSum,
      email: EMail,
      fee: Fee,
      currency: OutSumCurrency,
      status: 'paid',
      timestamp: new Date()
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    sendTelegramNotification({
      orderId: InvId,
      amount: OutSum,
      email: EMail
    });

    // –û—Ç–≤–µ—á–∞–µ–º Robokassa
    res.send(`OK${InvId}`);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).send('ERROR');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã (–≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
app.get('/api/robokassa/success', (req, res) => {
  const { OutSum, InvId, SignatureValue } = req.query;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
  const isValidSignature = verifySignature(
    InvId, 
    OutSum, 
    SignatureValue, 
    ROBOKASSA_CONFIG.password1
  );

  if (!isValidSignature) {
    res.redirect('/payment-error?reason=invalid_signature');
    return;
  }

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞
  res.redirect(`/payment-success?order=${InvId}&amount=${OutSum}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
app.get('/api/robokassa/fail', (req, res) => {
  const { OutSum, InvId } = req.query;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
  updateOrderStatus(InvId, 'failed');
  
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏
  res.redirect(`/payment-error?order=${InvId}&amount=${OutSum}`);
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ë–î)
function saveOrder(orderData) {
  console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑:', orderData);
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  // –ù–∞–ø—Ä–∏–º–µ—Ä: await db.orders.create(orderData);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(data) {
  const botToken = '–í–ê–®_BOT_TOKEN';
  const chatId = '–í–ê–®_CHAT_ID';
  
  const message = `
üí∞ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!

üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${data.orderId}
üí≥ –°—É–º–º–∞: ${data.amount} ‚ÇΩ
üìß Email: ${data.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
  `;

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      })
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
    }

    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
function updateOrderStatus(orderId, status) {
  console.log(`–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –Ω–∞ ${status}`);
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
app.post('/api/robokassa/create-payment', (req, res) => {
  const { orderId, amount, description, email } = req.body;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
  const signature = generateSignature(orderId, amount, ROBOKASSA_CONFIG.password1);

  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Robokassa
  const paymentData = {
    MerchantLogin: ROBOKASSA_CONFIG.merchantLogin,
    OutSum: amount,
    Description: description,
    InvId: orderId,
    Email: email,
    Culture: 'ru',
    Encoding: 'utf-8',
    SignatureValue: signature,
    IsTest: ROBOKASSA_CONFIG.isTest ? 1 : 0
  };

  // URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ Robokassa
  const robokassaUrl = 'https://auth.robokassa.ru/Merchant/Index.aspx';
  
  res.json({
    success: true,
    paymentUrl: robokassaUrl,
    paymentData: paymentData
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: http://localhost:${PORT}/api/robokassa/notification`);
});

module.exports = app; 