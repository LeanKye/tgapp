// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–µ—Å—Ç–∞–º–∏ –¥–ª—è iOS –∏ Android
class GestureHandler {
  constructor() {
    this.isEnabled = true;
    this.touchStartX = 0;
    this.touchStartY = 0;
    this.touchEndX = 0;
    this.touchEndY = 0;
    this.touchStartTime = 0;
    this.minSwipeDistance = 80;
    this.maxSwipeTime = 500;
    this.isSwipeInProgress = false;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∂–µ—Å—Ç–æ–≤
    this.gestures = {
      swipeLeft: { enabled: true, threshold: 80 },
      swipeRight: { enabled: true, threshold: 80 },
      swipeUp: { enabled: false, threshold: 100 },
      swipeDown: { enabled: false, threshold: 100 },
      pullToRefresh: { enabled: false, threshold: 120 },
      edgeSwipe: { enabled: true, threshold: 20 } // –°–≤–∞–π–ø —Å –∫—Ä–∞—è —ç–∫—Ä–∞–Ω–∞
    };
    
    this.init();
  }

  init() {
    if (!this.isMobile()) {
      return;
    }

    this.setupEventListeners();
    this.setupEdgeSwipe();
    this.setupVisualFeedback();
    this.showGestureInfo();
  }
  
  showGestureInfo() {
    console.log(`
üéØ –°–∏—Å—Ç–µ–º–∞ –∂–µ—Å—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!

üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–µ—Å—Ç—ã:
  ‚Ä¢ –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ ‚Üí –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
  ‚Ä¢ –°–≤–∞–π–ø –≤–ª–µ–≤–æ ‚Üí –í–ø–µ—Ä–µ–¥ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
  ‚Ä¢ Edge swipe ‚Üí –°–≤–∞–π–ø —Å –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è —ç–∫—Ä–∞–Ω–∞

‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
  ‚Ä¢ enableGestures() - –≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ –∂–µ—Å—Ç—ã
  ‚Ä¢ disableGestures() - –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –∂–µ—Å—Ç—ã
  ‚Ä¢ toggleGesture('swipeRight', true/false) - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∂–µ—Å—Ç–∞–º–∏

üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–µ—Å—Ç—ã –¥–ª—è toggleGesture:
  - swipeLeft, swipeRight, swipeUp, swipeDown, pullToRefresh, edgeSwipe
    `);
  }

  isMobile() {
    return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
           (window.innerWidth <= 1024 && 'ontouchstart' in window);
  }

  setupEventListeners() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ touch —Å–æ–±—ã—Ç–∏—è
    document.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: true });
    document.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false });
    document.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: true });
    
    // –û—Ç–º–µ–Ω–∞ –∂–µ—Å—Ç–æ–≤ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
    document.addEventListener('touchcancel', this.handleTouchCancel.bind(this), { passive: true });
    window.addEventListener('blur', this.handleTouchCancel.bind(this));
  }

  handleTouchStart(e) {
    if (!this.isEnabled) return;
    
    const touch = e.touches[0];
    this.touchStartX = touch.clientX;
    this.touchStartY = touch.clientY;
    this.touchStartTime = Date.now();
    this.isSwipeInProgress = false;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É –Ω–∞—á–∞–ª–∞ –∂–µ—Å—Ç–∞
    this.startZone = this.getStartZone(touch.clientX, touch.clientY);
  }

  handleTouchMove(e) {
    if (!this.isEnabled) return;
    
    const touch = e.touches[0];
    const deltaX = touch.clientX - this.touchStartX;
    const deltaY = touch.clientY - this.touchStartY;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
    const direction = this.getSwipeDirection(deltaX, deltaY);
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å–≤–∞–π–ø–æ–≤
    if (direction === 'horizontal' && Math.abs(deltaX) > 20) {
      e.preventDefault();
      this.isSwipeInProgress = true;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫
      this.showSwipeFeedback(deltaX, direction);
    }
  }

  handleTouchEnd(e) {
    if (!this.isEnabled) return;
    
    const touch = e.changedTouches[0];
    this.touchEndX = touch.clientX;
    this.touchEndY = touch.clientY;
    
    const deltaX = this.touchEndX - this.touchStartX;
    const deltaY = this.touchEndY - this.touchStartY;
    const deltaTime = Date.now() - this.touchStartTime;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫
    this.hideSwipeFeedback();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–µ—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    if (deltaTime <= this.maxSwipeTime) {
      this.processGesture(deltaX, deltaY);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.resetTouch();
  }

  handleTouchCancel() {
    this.hideSwipeFeedback();
    this.resetTouch();
  }

  resetTouch() {
    this.touchStartX = 0;
    this.touchStartY = 0;
    this.touchEndX = 0;
    this.touchEndY = 0;
    this.touchStartTime = 0;
    this.isSwipeInProgress = false;
    this.startZone = null;
  }

  getStartZone(x, y) {
    const screenWidth = window.innerWidth;
    const screenHeight = window.innerHeight;
    const edgeThreshold = 20;
    
    return {
      isLeftEdge: x <= edgeThreshold,
      isRightEdge: x >= screenWidth - edgeThreshold,
      isTopEdge: y <= edgeThreshold,
      isBottomEdge: y >= screenHeight - edgeThreshold,
      x: x,
      y: y
    };
  }

  getSwipeDirection(deltaX, deltaY) {
    const absDeltaX = Math.abs(deltaX);
    const absDeltaY = Math.abs(deltaY);
    
    if (absDeltaX > absDeltaY) {
      return 'horizontal';
    } else if (absDeltaY > absDeltaX) {
      return 'vertical';
    }
    return 'diagonal';
  }

  processGesture(deltaX, deltaY) {
    const absDeltaX = Math.abs(deltaX);
    const absDeltaY = Math.abs(deltaY);
    
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å–≤–∞–π–ø—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (absDeltaX > this.gestures.swipeLeft.threshold && absDeltaX > absDeltaY) {
      if (deltaX > 0 && this.gestures.swipeRight.enabled) {
        this.handleSwipeRight();
      } else if (deltaX < 0 && this.gestures.swipeLeft.enabled) {
        this.handleSwipeLeft();
      }
    }
    
    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–∞–π–ø—ã
    if (absDeltaY > this.gestures.swipeUp.threshold && absDeltaY > absDeltaX) {
      if (deltaY < 0 && this.gestures.swipeUp.enabled) {
        this.handleSwipeUp();
      } else if (deltaY > 0 && this.gestures.swipeDown.enabled) {
        this.handleSwipeDown();
      }
    }
  }

  handleSwipeRight() {
    console.log('üîÑ –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
    if (window.history.length > 1 && !this.isMainPage()) {
      this.showNavigationFeedback('–Ω–∞–∑–∞–¥');
      window.history.back();
    } else {
      this.showNavigationFeedback('–≥–ª–∞–≤–Ω–∞—è');
      window.location.href = '/tgapp/';
    }
  }

  handleSwipeLeft() {
    console.log('üîÑ –°–≤–∞–π–ø –≤–ª–µ–≤–æ - –≤–ø–µ—Ä–µ–¥');
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤–ø–µ—Ä–µ–¥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    this.showNavigationFeedback('–≤–ø–µ—Ä–µ–¥');
  }

  handleSwipeUp() {
    console.log('üîÑ –°–≤–∞–π–ø –≤–≤–µ—Ä—Ö');
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  }

  handleSwipeDown() {
    console.log('üîÑ –°–≤–∞–π–ø –≤–Ω–∏–∑');
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É pull-to-refresh
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  isMainPage() {
    const pathname = window.location.pathname;
    const search = window.location.search;
    
    const isMainPath = pathname === '/' || 
                      pathname === '/tgapp/' || 
                      pathname === '/tgapp' ||
                      pathname === '/index.html' ||
                      pathname === '/tgapp/index.html' ||
                      pathname.endsWith('/tgapp') ||
                      pathname.endsWith('/tgapp/');
    
    const hasNoParams = !search.includes('product=') && !search.includes('category=');
    
    return isMainPath && hasNoParams;
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–∞–π–ø–∞ —Å –∫—Ä–∞—è —ç–∫—Ä–∞–Ω–∞
  setupEdgeSwipe() {
    let edgeSwipeArea = document.createElement('div');
    edgeSwipeArea.className = 'edge-swipe-area';
    edgeSwipeArea.style.cssText = `
      position: fixed;
      left: 0;
      top: 0;
      width: 20px;
      height: 100vh;
      z-index: 9999;
      pointer-events: auto;
      background: transparent;
    `;
    
    document.body.appendChild(edgeSwipeArea);
    
    edgeSwipeArea.addEventListener('touchstart', (e) => {
      e.stopPropagation();
      this.handleTouchStart(e);
    }, { passive: true });
  }

  // –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫ –¥–ª—è —Å–≤–∞–π–ø–æ–≤
  setupVisualFeedback() {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–¥–±–µ–∫–∞
    this.feedbackElement = document.createElement('div');
    this.feedbackElement.className = 'swipe-feedback';
    this.feedbackElement.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 12px;
      padding: 12px 20px;
      font-size: 14px;
      color: white;
      z-index: 10000;
      opacity: 0;
      transition: opacity 0.2s ease;
      pointer-events: none;
      white-space: nowrap;
    `;
    
    document.body.appendChild(this.feedbackElement);
  }

  showSwipeFeedback(deltaX, direction) {
    if (!this.feedbackElement) return;
    
    let text = '';
    let opacity = Math.min(Math.abs(deltaX) / 100, 1);
    
    if (direction === 'horizontal') {
      if (deltaX > 0) {
        text = '‚Üê –ù–∞–∑–∞–¥';
      } else {
        text = '–í–ø–µ—Ä–µ–¥ ‚Üí';
      }
    }
    
    this.feedbackElement.textContent = text;
    this.feedbackElement.style.opacity = opacity * 0.8;
  }

  hideSwipeFeedback() {
    if (this.feedbackElement) {
      this.feedbackElement.style.opacity = '0';
    }
  }

  showNavigationFeedback(action) {
    if (!this.feedbackElement) return;
    
    const texts = {
      '–Ω–∞–∑–∞–¥': '‚Üê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥',
      '–≤–ø–µ—Ä–µ–¥': '–ü–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä–µ–¥ ‚Üí',
      '–≥–ª–∞–≤–Ω–∞—è': 'üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'
    };
    
    this.feedbackElement.textContent = texts[action] || action;
    this.feedbackElement.style.opacity = '1';
    
    setTimeout(() => {
      this.hideSwipeFeedback();
    }, 1000);
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–µ—Å—Ç–∞–º–∏
  enableGesture(gestureName) {
    if (this.gestures[gestureName]) {
      this.gestures[gestureName].enabled = true;
    }
  }

  disableGesture(gestureName) {
    if (this.gestures[gestureName]) {
      this.gestures[gestureName].enabled = false;
    }
  }

  enableAllGestures() {
    this.isEnabled = true;
  }

  disableAllGestures() {
    this.isEnabled = false;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∂–µ—Å—Ç–∞–º
window.gestureHandler = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  window.gestureHandler = new GestureHandler();
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–µ—Å—Ç–∞–º–∏
window.enableGestures = function() {
  if (window.gestureHandler) {
    window.gestureHandler.enableAllGestures();
  }
};

window.disableGestures = function() {
  if (window.gestureHandler) {
    window.gestureHandler.disableAllGestures();
  }
};

window.toggleGesture = function(gestureName, enabled) {
  if (window.gestureHandler) {
    if (enabled) {
      window.gestureHandler.enableGesture(gestureName);
    } else {
      window.gestureHandler.disableGesture(gestureName);
    }
  }
}; 