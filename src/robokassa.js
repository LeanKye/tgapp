// –ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Robokassa
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
const ROBOKASSA_CONFIG = {
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Robokassa
  merchantLogin: 'test_merchant', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ª–æ–≥–∏–Ω
  password1: 'test_password1', // –ü–∞—Ä–æ–ª—å #1 –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
  password2: 'test_password2', // –ü–∞—Ä–æ–ª—å #2 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  isTest: true, // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
  baseUrl: 'https://auth.robokassa.ru/Merchant/Index.aspx'
};

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Robokassa
class RobokassaPayment {
  constructor(config = ROBOKASSA_CONFIG) {
    this.config = config;
    this.currentPayment = null;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
  createPayment(orderData) {
    const {
      orderId,
      amount,
      description,
      email = '',
      culture = 'ru',
      encoding = 'utf-8'
    } = orderData;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    const signatureValue = this.generateSignature(orderId, amount, description);
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const formData = {
      MerchantLogin: this.config.merchantLogin,
      OutSum: amount,
      Description: description,
      InvId: orderId,
      Email: email,
      Culture: culture,
      Encoding: encoding,
      SignatureValue: signatureValue,
      IsTest: this.config.isTest ? 1 : 0
    };

    this.currentPayment = {
      formData,
      orderData,
      signatureValue
    };

    return this.currentPayment;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
  generateSignature(orderId, amount, description) {
    const signatureString = `${this.config.merchantLogin}:${amount}:${orderId}:${this.config.password1}`;
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ crypto-js –∏–ª–∏ –¥—Ä—É–≥—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è MD5
    // –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return this.simpleMD5(signatureString);
  }

  // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è MD5 (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ crypto-js –∏–ª–∏ –¥—Ä—É–≥—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
  simpleMD5(str) {
    // –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π MD5
    return btoa(str).replace(/[^a-zA-Z0-9]/g, '').substring(0, 32);
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
  openPaymentModal(paymentData) {
    return new Promise((resolve, reject) => {
      console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–ø–ª–∞—Ç—ã');
      
      // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã
      const modal = this.createPaymentModal(paymentData);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      const handleSuccess = (event) => {
        console.log('–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω:', event.detail);
        this.closePaymentModal();
        resolve(event.detail);
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        modal.element.removeEventListener('paymentSuccess', handleSuccess);
        modal.element.removeEventListener('paymentCancel', handleCancel);
      };
      
      const handleCancel = () => {
        console.log('–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω');
        this.closePaymentModal();
        reject(new Error('Payment cancelled'));
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        modal.element.removeEventListener('paymentSuccess', handleSuccess);
        modal.element.removeEventListener('paymentCancel', handleCancel);
      };
      
      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      modal.element.addEventListener('paymentSuccess', handleSuccess);
      modal.element.addEventListener('paymentCancel', handleCancel);
      
      console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      document.body.appendChild(modal.element);
      setTimeout(() => modal.element.classList.add('show'), 10);
    });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
  createPaymentModal(paymentData) {
    const modalElement = document.createElement('div');
    modalElement.className = 'robokassa-modal-overlay';
    modalElement.innerHTML = `
      <div class="robokassa-modal">
        <div class="robokassa-modal-header">
          <h3>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞</h3>
          <button class="robokassa-modal-close">&times;</button>
        </div>
        <div class="robokassa-modal-body">
          <div class="payment-info">
            <div class="payment-item">
              <span>–¢–æ–≤–∞—Ä:</span>
              <span>${paymentData.orderData.description}</span>
            </div>
            <div class="payment-item">
              <span>–°—É–º–º–∞:</span>
              <span>${paymentData.orderData.amount} ‚ÇΩ</span>
            </div>
            <div class="payment-item">
              <span>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</span>
              <span>${paymentData.orderData.orderId}</span>
            </div>
          </div>
          <div class="payment-methods">
            <h4>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</h4>
            <div class="payment-method" data-method="card">
              <div class="method-icon">üí≥</div>
              <div class="method-info">
                <div class="method-name">–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</div>
                <div class="method-description">Visa, MasterCard, –ú–ò–†</div>
              </div>
            </div>
            <div class="payment-method" data-method="sbp">
              <div class="method-icon">üì±</div>
              <div class="method-info">
                <div class="method-name">–°–ë–ü</div>
                <div class="method-description">–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π</div>
              </div>
            </div>
            <div class="payment-method" data-method="wallet">
              <div class="method-icon">üëõ</div>
              <div class="method-info">
                <div class="method-name">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏</div>
                <div class="method-description">–ÆMoney, QIWI, WebMoney</div>
              </div>
            </div>
          </div>
        </div>
        <div class="robokassa-modal-footer">
          <button class="robokassa-btn robokassa-btn-secondary" data-action="cancel">–û—Ç–º–µ–Ω–∞</button>
          <button class="robokassa-btn robokassa-btn-primary" data-action="pay" disabled>–û–ø–ª–∞—Ç–∏—Ç—å</button>
        </div>
      </div>
    `;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const closeBtn = modalElement.querySelector('.robokassa-modal-close');
    const cancelBtn = modalElement.querySelector('[data-action="cancel"]');
    const payBtn = modalElement.querySelector('[data-action="pay"]');
    const paymentMethods = modalElement.querySelectorAll('.payment-method');

    let selectedMethod = null;

    // –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    paymentMethods.forEach(method => {
      method.addEventListener('click', () => {
        paymentMethods.forEach(m => m.classList.remove('selected'));
        method.classList.add('selected');
        selectedMethod = method.dataset.method;
        payBtn.disabled = false;
      });
    });

    // –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
    payBtn.addEventListener('click', () => {
      if (!selectedMethod) return;
      
      console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã, –º–µ—Ç–æ–¥:', selectedMethod);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      payBtn.disabled = true;
      payBtn.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã
      setTimeout(() => {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞...');
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–ø—Ä—è–º—É—é
        const result = {
          success: true,
          orderId: paymentData.orderData.orderId,
          amount: paymentData.orderData.amount,
          method: selectedMethod,
          transactionId: 'TEST_' + Date.now(),
          timestamp: new Date().toISOString()
        };
        
        console.log('–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
        
        // –í—ã–∑—ã–≤–∞–µ–º onSuccess —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ
        const successEvent = new CustomEvent('paymentSuccess', { detail: result });
        modalElement.dispatchEvent(successEvent);
      }, 2000);
    });

    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    const handleCancel = () => {
      console.log('–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞');
      // –í—ã–∑—ã–≤–∞–µ–º onCancel —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ
      const cancelEvent = new CustomEvent('paymentCancel');
      modalElement.dispatchEvent(cancelEvent);
    };

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    if (closeBtn) {
      closeBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('–ö–ª–∏–∫ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É');
        handleCancel();
      });
    }

    if (cancelBtn) {
      cancelBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –û—Ç–º–µ–Ω–∞');
        handleCancel();
      });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    modalElement.addEventListener('click', (e) => {
      if (e.target === modalElement) {
        console.log('–ö–ª–∏–∫ –ø–æ —Ñ–æ–Ω—É');
        handleCancel();
      }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        console.log('–ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ Escape');
        handleCancel();
        document.removeEventListener('keydown', handleEscape);
      }
    };
    document.addEventListener('keydown', handleEscape);

    return {
      element: modalElement
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
  async processPayment(paymentData, method) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
    // –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ç–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ Robokassa
    
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        try {
          console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:', { paymentData, method });
          resolve({
            success: true,
            orderId: paymentData.orderData.orderId,
            amount: paymentData.orderData.amount,
            method: method,
            transactionId: 'TEST_' + Date.now(),
            timestamp: new Date().toISOString()
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
          reject(error);
        }
      }, 1000);
    });
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  closePaymentModal() {
    const modal = document.querySelector('.robokassa-modal-overlay');
    if (modal) {
      console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
      modal.classList.remove('show');
      setTimeout(() => {
        if (modal.parentNode) {
          modal.parentNode.removeChild(modal);
          console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ DOM');
        }
      }, 300);
    } else {
      console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏)
  verifySignature(orderId, amount, signature) {
    const expectedSignature = this.generateSignature(orderId, amount, '');
    return signature.toLowerCase() === expectedSignature.toLowerCase();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
export default RobokassaPayment;

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const robokassa = new RobokassaPayment(); 